------- FILE playfield.asm LEVEL 1 PASS 1
      1  0000					      processor	6502
      2  0000 ????
------- FILE vcs.h LEVEL 2 PASS 1
      0  0000 ????				      include	"vcs.h"
      1  0000 ????						; VCS.H
      2  0000 ????						; Version 1.06, 06/SEP/2020
      3  0000 ????
      4  0000 ????	       00 6a	   VERSION_VCS =	106
      5  0000 ????
      6  0000 ????						; THIS IS *THE* "STANDARD" VCS.H
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  0000 ????						;
     10  0000 ????						; This file defines hardware registers and memory mapping for the
     11  0000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  0000 ????						; available at at https://dasm-assembler.github.io/
     14  0000 ????						;
     15  0000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     16  0000 ????						; contents, or would like ot add something, please report as an issue at...
     17  0000 ????						; https://github.com/dasm-assembler/dasm/issues
     18  0000 ????
     19  0000 ????						;
     20  0000 ????						; Latest Revisions...
     21  0000 ????						; 1.06  05/SEP/2020	 Modified header/license and links to new versions
     22  0000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  0000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  0000 ????						;			    This will allow conditional code to verify VCS.H being
     25  0000 ????						;			    used for code assembly.
     26  0000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  0000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  0000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  0000 ????						;			 readability issue, and binary compatibility with disassembled
     30  0000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  0000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  0000 ????						;			 which was broken by the use of segments in this file, as
     33  0000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  0000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  0000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  0000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  0000 ????						;						   it is safe to leave it undefined, and the base address will
     38  0000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  0000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  0000 ????						;			  - register definitions are now generated through assignment
     41  0000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  0000 ????						;			    address architecture.
     43  0000 ????						; 1.0	22/MAR/2003		Initial release
     44  0000 ????
     45  0000 ????
     46  0000 ????						;-------------------------------------------------------------------------------
     47  0000 ????
     48  0000 ????						; TIA_BASE_ADDRESS
     49  0000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  0000 ????						; Normally 0, the base address should (externally, before including this file)
     51  0000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  0000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  0000 ????						; < $40 as a bankswitch.
     54  0000 ????
     55  0000 ????				      IFNCONST	TIA_BASE_ADDRESS
     56  0000 ????	       00 00	   TIA_BASE_ADDRESS =	0
     57  0000 ????				      ENDIF
     58  0000 ????
     59  0000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  0000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  0000 ????						; *OR* by declaring the label before including this file, eg:
     62  0000 ????						; TIA_BASE_ADDRESS = $40
     63  0000 ????						;   include "vcs.h"
     64  0000 ????
     65  0000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  0000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  0000 ????						; for the mirrored ROM hardware registers.
     68  0000 ????
     69  0000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  0000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  0000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  0000 ????
     73  0000 ????				      IFNCONST	TIA_BASE_READ_ADDRESS
     74  0000 ????	       00 00	   TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  0000 ????				      ENDIF
     76  0000 ????
     77  0000 ????				      IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  0000 ????	       00 00	   TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  0000 ????				      ENDIF
     80  0000 ????
     81  0000 ????						;-------------------------------------------------------------------------------
     82  0000 ????
     83 U0000 ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U0000 ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0000 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE playfield.asm
------- FILE macro.h LEVEL 2 PASS 1
      0  0000 ????				      include	"macro.h"
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.09, 05/SEP/2020
      3  0000 ????
      4  0000 ????	       00 6d	   VERSION_MACRO =	109
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler.
     13  0000 ????						;
     14  0000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     15  0000 ????						; contents, or would like ot add something, please report as an issue at...
     16  0000 ????						; https://github.com/dasm-assembler/dasm/issues
     17  0000 ????
     18  0000 ????
     19  0000 ????						; Latest Revisions...
     20  0000 ????						; 1.09  05/SEP/2020	 - updated license/links
     21  0000 ????
     22  0000 ????						; 1.08  13/JUL/2020	 - added use of LXA to CLEAN_START
     23  0000 ????						; 1.07  19/JAN/2020	 - correction to comment VERTICAL_SYNC
     24  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_SYNC (Edwin Blink)
     25  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     26  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     27  0000 ????						;			   used for code assembly.
     28  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     29  0000 ????						;
     30  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     31  0000 ????						;
     32  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     33  0000 ????						;			   (standardised macro for vertical synch code)
     34  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     35  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     36  0000 ????						; 1.0	22/MAR/2003		Initial release
     37  0000 ????
     38  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     39  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     40  0000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     41  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     42  0000 ????						;   registers and require them to be defined first).
     43  0000 ????
     44  0000 ????						; Available macros...
     45  0000 ????						;   SLEEP n		 - sleep for n cycles
     46  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     47  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     48  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     49  0000 ????
     50  0000 ????						;-------------------------------------------------------------------------------
     51  0000 ????						; SLEEP duration
     52  0000 ????						; Original author: Thomas Jentzsch
     53  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     54  0000 ????						; useful for code where precise timing is required.
     55  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     56  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     57  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     58  0000 ????
     59  0000 ????				      MAC	sleep
     60  0000 ????			   .CYCLES    SET	{1}
     61  0000 ????
     62  0000 ????				      IF	.CYCLES < 2
     63  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     64  0000 ????				      ERR
     65  0000 ????				      ENDIF
     66  0000 ????
     67  0000 ????				      IF	.CYCLES & 1
     68  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     69  0000 ????				      nop	0
     70  0000 ????				      ELSE
     71  0000 ????				      bit	VSYNC
     72  0000 ????				      ENDIF
     73  0000 ????			   .CYCLES    SET	.CYCLES - 3
     74  0000 ????				      ENDIF
     75  0000 ????
     76  0000 ????				      REPEAT	.CYCLES / 2
     77  0000 ????				      nop
     78  0000 ????				      REPEND
     79  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     80  0000 ????
     81  0000 ????						;-------------------------------------------------------------------------------
     82  0000 ????						; VERTICAL_SYNC
     83  0000 ????						; revised version by Edwin Blink -- saves bytes!
     84  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     85  0000 ????						; Note: Alters the accumulator
     86  0000 ????
     87  0000 ????						; OUT: A = 0
     88  0000 ????
     89  0000 ????				      MAC	vertical_sync
     90  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     91  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     92  0000 ????				      sta	VSYNC
     93  0000 ????				      lsr
     94  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     95  0000 ????				      ENDM
     96  0000 ????
     97  0000 ????						;-------------------------------------------------------------------------------
     98  0000 ????						; CLEAN_START
     99  0000 ????						; Original author: Andrew Davie
    100  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    101  0000 ????						; Sets stack pointer to $FF, and all registers to 0
    102  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    103  0000 ????						; Use as very first section of code on boot (ie: at reset)
    104  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    105  0000 ????
    106  0000 ????				      MAC	clean_start
    107  0000 ????				      sei
    108  0000 ????				      cld
    109  0000 ????
    110  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
    111  0000 ????				      lxa	#0
    112  0000 ????				      ELSE
    113  0000 ????				      ldx	#0
    114  0000 ????				      txa
    115  0000 ????				      ENDIF
    116  0000 ????				      tay
    117  0000 ????			   .CLEAR_STACK dex
    118  0000 ????				      txs
    119  0000 ????				      pha
    120  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  0000 ????
    122  0000 ????				      ENDM
    123  0000 ????
    124  0000 ????						;-------------------------------------------------------
    125  0000 ????						; SET_POINTER
    126  0000 ????						; Original author: Manuel Rotschkar
    127  0000 ????						;
    128  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  0000 ????						;
    130  0000 ????						; Usage: SET_POINTER pointer, address
    131  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  0000 ????						;
    133  0000 ????						; Note: Alters the accumulator, NZ flags
    134  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  0000 ????						; IN 2: absolute address
    136  0000 ????
    137  0000 ????				      MAC	set_pointer
    138  0000 ????			   .POINTER   SET	{1}
    139  0000 ????			   .ADDRESS   SET	{2}
    140  0000 ????
    141  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  0000 ????				      STA	.POINTER	; Store in pointer
    143  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    144  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    145  0000 ????
    146  0000 ????				      ENDM
    147  0000 ????
    148  0000 ????						;-------------------------------------------------------
    149  0000 ????						; BOUNDARY byte#
    150  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    151  0000 ????						;
    152  0000 ????						; Push data to a certain position inside a page and keep count of how
    153  0000 ????						; many free bytes the programmer will have.
    154  0000 ????						;
    155  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    156  0000 ????
    157  0000 ????			   .FREE_BYTES SET	0
    158  0000 ????				      MAC	boundary
    159  0000 ????				      REPEAT	256
    160  0000 ????				      IF	<. % {1} = 0
    161  0000 ????				      MEXIT
    162  0000 ????				      ELSE
    163  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    164  0000 ????				      .byte	$00
    165  0000 ????				      ENDIF
    166  0000 ????				      REPEND
    167  0000 ????				      ENDM
    168  0000 ????
    169  0000 ????
    170  0000 ????						; EOF
------- FILE playfield.asm
      5  0000 ????
      6  0000 ????				      seg	code
      7  f000					      org	$F000
      8  f000
      9  f000				   Reset
      0  f000					      CLEAN_START
      1  f000		       78		      sei
      2  f001		       d8		      cld
      3  f002
      4  f002					      IFNCONST	NO_ILLEGAL_OPCODES
      5  f002		       ab 00		      lxa	#0
      6  f004				  -	      ELSE
      7  f004				  -	      ldx	#0
      8  f004				  -	      txa
      9  f004					      ENDIF
     10  f004		       a8		      tay
     11  f005		       ca	   .CLEAR_STACK dex
     12  f006		       9a		      txs
     13  f007		       48		      pha
     14  f008		       d0 fb		      bne	.CLEAR_STACK
     15  f00a
     11  f00a
     12  f00a		       a2 80		      ldx	#$80
     13  f00c		       86 09		      stx	COLUBK
     14  f00e
     15  f00e		       a9 1c		      lda	#$1C
     16  f010		       85 08		      sta	COLUPF
     17  f012
     18  f012							;; turn VBLANK, VSYNC on
     19  f012				   StartFrame
     20  f012		       a9 02		      lda	#2
     21  f014		       85 01		      sta	VBLANK
     22  f016		       85 00		      STA	VSYNC
     23  f018
     24  f018
     25  f018							;; 3 VSYNC scanlines
     26  f018					      REPEAT	3
     27  f018		       85 02		      sta	WSYNC
     26  f018					      REPEND
     27  f01a		       85 02		      sta	WSYNC
     26  f01a					      REPEND
     27  f01c		       85 02		      sta	WSYNC
     28  f01e					      REPEND
     29  f01e		       a9 00		      lda	#0
     30  f020		       85 00		      sta	VSYNC
     31  f022
     32  f022							;; 27 VBLANK scanlines
     33  f022					      REPEAT	37
     34  f022		       85 02		      sta	WSYNC
     33  f022					      REPEND
     34  f024		       85 02		      sta	WSYNC
     33  f024					      REPEND
     34  f026		       85 02		      sta	WSYNC
     33  f026					      REPEND
     34  f028		       85 02		      sta	WSYNC
     33  f028					      REPEND
     34  f02a		       85 02		      sta	WSYNC
     33  f02a					      REPEND
     34  f02c		       85 02		      sta	WSYNC
     33  f02c					      REPEND
     34  f02e		       85 02		      sta	WSYNC
     33  f02e					      REPEND
     34  f030		       85 02		      sta	WSYNC
     33  f030					      REPEND
     34  f032		       85 02		      sta	WSYNC
     33  f032					      REPEND
     34  f034		       85 02		      sta	WSYNC
     33  f034					      REPEND
     34  f036		       85 02		      sta	WSYNC
     33  f036					      REPEND
     34  f038		       85 02		      sta	WSYNC
     33  f038					      REPEND
     34  f03a		       85 02		      sta	WSYNC
     33  f03a					      REPEND
     34  f03c		       85 02		      sta	WSYNC
     33  f03c					      REPEND
     34  f03e		       85 02		      sta	WSYNC
     33  f03e					      REPEND
     34  f040		       85 02		      sta	WSYNC
     33  f040					      REPEND
     34  f042		       85 02		      sta	WSYNC
     33  f042					      REPEND
     34  f044		       85 02		      sta	WSYNC
     33  f044					      REPEND
     34  f046		       85 02		      sta	WSYNC
     33  f046					      REPEND
     34  f048		       85 02		      sta	WSYNC
     33  f048					      REPEND
     34  f04a		       85 02		      sta	WSYNC
     33  f04a					      REPEND
     34  f04c		       85 02		      sta	WSYNC
     33  f04c					      REPEND
     34  f04e		       85 02		      sta	WSYNC
     33  f04e					      REPEND
     34  f050		       85 02		      sta	WSYNC
     33  f050					      REPEND
     34  f052		       85 02		      sta	WSYNC
     33  f052					      REPEND
     34  f054		       85 02		      sta	WSYNC
     33  f054					      REPEND
     34  f056		       85 02		      sta	WSYNC
     33  f056					      REPEND
     34  f058		       85 02		      sta	WSYNC
     33  f058					      REPEND
     34  f05a		       85 02		      sta	WSYNC
     33  f05a					      REPEND
     34  f05c		       85 02		      sta	WSYNC
     33  f05c					      REPEND
     34  f05e		       85 02		      sta	WSYNC
     33  f05e					      REPEND
     34  f060		       85 02		      sta	WSYNC
     33  f060					      REPEND
     34  f062		       85 02		      sta	WSYNC
     33  f062					      REPEND
     34  f064		       85 02		      sta	WSYNC
     33  f064					      REPEND
     34  f066		       85 02		      sta	WSYNC
     33  f066					      REPEND
     34  f068		       85 02		      sta	WSYNC
     33  f068					      REPEND
     34  f06a		       85 02		      sta	WSYNC
     35  f06c					      REPEND
     36  f06c		       a9 00		      lda	#0
     37  f06e		       85 01		      sta	VBLANK
     38  f070
     39  f070							;; set CTRLPF for playfield reflection
     40  f070		       a2 01		      ldx	#1
     41  f072		       86 0a		      stx	CTRLPF
     42  f074
     43  f074							;; 192 visible scanlines
     44  f074							;; 7 no PF set scanlines
     45  f074		       a2 00		      ldx	#0
     46  f076		       86 0d		      stx	PF0
     47  f078		       86 0e		      stx	PF1
     48  f07a		       86 0f		      stx	PF2
     49  f07c					      REPEAT	7
     50  f07c		       85 02		      sta	WSYNC
     49  f07c					      REPEND
     50  f07e		       85 02		      sta	WSYNC
     49  f07e					      REPEND
     50  f080		       85 02		      sta	WSYNC
     49  f080					      REPEND
     50  f082		       85 02		      sta	WSYNC
     49  f082					      REPEND
     50  f084		       85 02		      sta	WSYNC
     49  f084					      REPEND
     50  f086		       85 02		      sta	WSYNC
     49  f086					      REPEND
     50  f088		       85 02		      sta	WSYNC
     51  f08a					      REPEND
     52  f08a
     53  f08a							;; set PF(0-2), display 7 scanlines
     54  f08a		       a2 e0		      ldx	#%11100000
     55  f08c		       86 0d		      stx	PF0
     56  f08e		       a2 ff		      ldx	#%11111111
     57  f090		       86 0e		      stx	PF1
     58  f092		       86 0f		      stx	PF2
     59  f094					      REPEAT	7
     60  f094		       85 02		      sta	WSYNC
     59  f094					      REPEND
     60  f096		       85 02		      sta	WSYNC
     59  f096					      REPEND
     60  f098		       85 02		      sta	WSYNC
     59  f098					      REPEND
     60  f09a		       85 02		      sta	WSYNC
     59  f09a					      REPEND
     60  f09c		       85 02		      sta	WSYNC
     59  f09c					      REPEND
     60  f09e		       85 02		      sta	WSYNC
     59  f09e					      REPEND
     60  f0a0		       85 02		      sta	WSYNC
     61  f0a2					      REPEND
     62  f0a2
     63  f0a2							;; set PF(0-2), display 164 scanlines
     64  f0a2		       a2 60		      ldx	#%01100000
     65  f0a4		       86 0d		      stx	PF0
     66  f0a6		       a2 00		      ldx	#0
     67  f0a8		       86 0e		      stx	PF1
     68  f0aa		       a2 80		      ldx	#%10000000
     69  f0ac		       86 0f		      stx	PF2
     70  f0ae					      REPEAT	164
     71  f0ae		       85 02		      sta	WSYNC
     70  f0ae					      REPEND
     71  f0b0		       85 02		      sta	WSYNC
     70  f0b0					      REPEND
     71  f0b2		       85 02		      sta	WSYNC
     70  f0b2					      REPEND
     71  f0b4		       85 02		      sta	WSYNC
     70  f0b4					      REPEND
     71  f0b6		       85 02		      sta	WSYNC
     70  f0b6					      REPEND
     71  f0b8		       85 02		      sta	WSYNC
     70  f0b8					      REPEND
     71  f0ba		       85 02		      sta	WSYNC
     70  f0ba					      REPEND
     71  f0bc		       85 02		      sta	WSYNC
     70  f0bc					      REPEND
     71  f0be		       85 02		      sta	WSYNC
     70  f0be					      REPEND
     71  f0c0		       85 02		      sta	WSYNC
     70  f0c0					      REPEND
     71  f0c2		       85 02		      sta	WSYNC
     70  f0c2					      REPEND
     71  f0c4		       85 02		      sta	WSYNC
     70  f0c4					      REPEND
     71  f0c6		       85 02		      sta	WSYNC
     70  f0c6					      REPEND
     71  f0c8		       85 02		      sta	WSYNC
     70  f0c8					      REPEND
     71  f0ca		       85 02		      sta	WSYNC
     70  f0ca					      REPEND
     71  f0cc		       85 02		      sta	WSYNC
     70  f0cc					      REPEND
     71  f0ce		       85 02		      sta	WSYNC
     70  f0ce					      REPEND
     71  f0d0		       85 02		      sta	WSYNC
     70  f0d0					      REPEND
     71  f0d2		       85 02		      sta	WSYNC
     70  f0d2					      REPEND
     71  f0d4		       85 02		      sta	WSYNC
     70  f0d4					      REPEND
     71  f0d6		       85 02		      sta	WSYNC
     70  f0d6					      REPEND
     71  f0d8		       85 02		      sta	WSYNC
     70  f0d8					      REPEND
     71  f0da		       85 02		      sta	WSYNC
     70  f0da					      REPEND
     71  f0dc		       85 02		      sta	WSYNC
     70  f0dc					      REPEND
     71  f0de		       85 02		      sta	WSYNC
     70  f0de					      REPEND
     71  f0e0		       85 02		      sta	WSYNC
     70  f0e0					      REPEND
     71  f0e2		       85 02		      sta	WSYNC
     70  f0e2					      REPEND
     71  f0e4		       85 02		      sta	WSYNC
     70  f0e4					      REPEND
     71  f0e6		       85 02		      sta	WSYNC
     70  f0e6					      REPEND
     71  f0e8		       85 02		      sta	WSYNC
     70  f0e8					      REPEND
     71  f0ea		       85 02		      sta	WSYNC
     70  f0ea					      REPEND
     71  f0ec		       85 02		      sta	WSYNC
     70  f0ec					      REPEND
     71  f0ee		       85 02		      sta	WSYNC
     70  f0ee					      REPEND
     71  f0f0		       85 02		      sta	WSYNC
     70  f0f0					      REPEND
     71  f0f2		       85 02		      sta	WSYNC
     70  f0f2					      REPEND
     71  f0f4		       85 02		      sta	WSYNC
     70  f0f4					      REPEND
     71  f0f6		       85 02		      sta	WSYNC
     70  f0f6					      REPEND
     71  f0f8		       85 02		      sta	WSYNC
     70  f0f8					      REPEND
     71  f0fa		       85 02		      sta	WSYNC
     70  f0fa					      REPEND
     71  f0fc		       85 02		      sta	WSYNC
     70  f0fc					      REPEND
     71  f0fe		       85 02		      sta	WSYNC
     70  f0fe					      REPEND
     71  f100		       85 02		      sta	WSYNC
     70  f100					      REPEND
     71  f102		       85 02		      sta	WSYNC
     70  f102					      REPEND
     71  f104		       85 02		      sta	WSYNC
     70  f104					      REPEND
     71  f106		       85 02		      sta	WSYNC
     70  f106					      REPEND
     71  f108		       85 02		      sta	WSYNC
     70  f108					      REPEND
     71  f10a		       85 02		      sta	WSYNC
     70  f10a					      REPEND
     71  f10c		       85 02		      sta	WSYNC
     70  f10c					      REPEND
     71  f10e		       85 02		      sta	WSYNC
     70  f10e					      REPEND
     71  f110		       85 02		      sta	WSYNC
     70  f110					      REPEND
     71  f112		       85 02		      sta	WSYNC
     70  f112					      REPEND
     71  f114		       85 02		      sta	WSYNC
     70  f114					      REPEND
     71  f116		       85 02		      sta	WSYNC
     70  f116					      REPEND
     71  f118		       85 02		      sta	WSYNC
     70  f118					      REPEND
     71  f11a		       85 02		      sta	WSYNC
     70  f11a					      REPEND
     71  f11c		       85 02		      sta	WSYNC
     70  f11c					      REPEND
     71  f11e		       85 02		      sta	WSYNC
     70  f11e					      REPEND
     71  f120		       85 02		      sta	WSYNC
     70  f120					      REPEND
     71  f122		       85 02		      sta	WSYNC
     70  f122					      REPEND
     71  f124		       85 02		      sta	WSYNC
     70  f124					      REPEND
     71  f126		       85 02		      sta	WSYNC
     70  f126					      REPEND
     71  f128		       85 02		      sta	WSYNC
     70  f128					      REPEND
     71  f12a		       85 02		      sta	WSYNC
     70  f12a					      REPEND
     71  f12c		       85 02		      sta	WSYNC
     70  f12c					      REPEND
     71  f12e		       85 02		      sta	WSYNC
     70  f12e					      REPEND
     71  f130		       85 02		      sta	WSYNC
     70  f130					      REPEND
     71  f132		       85 02		      sta	WSYNC
     70  f132					      REPEND
     71  f134		       85 02		      sta	WSYNC
     70  f134					      REPEND
     71  f136		       85 02		      sta	WSYNC
     70  f136					      REPEND
     71  f138		       85 02		      sta	WSYNC
     70  f138					      REPEND
     71  f13a		       85 02		      sta	WSYNC
     70  f13a					      REPEND
     71  f13c		       85 02		      sta	WSYNC
     70  f13c					      REPEND
     71  f13e		       85 02		      sta	WSYNC
     70  f13e					      REPEND
     71  f140		       85 02		      sta	WSYNC
     70  f140					      REPEND
     71  f142		       85 02		      sta	WSYNC
     70  f142					      REPEND
     71  f144		       85 02		      sta	WSYNC
     70  f144					      REPEND
     71  f146		       85 02		      sta	WSYNC
     70  f146					      REPEND
     71  f148		       85 02		      sta	WSYNC
     70  f148					      REPEND
     71  f14a		       85 02		      sta	WSYNC
     70  f14a					      REPEND
     71  f14c		       85 02		      sta	WSYNC
     70  f14c					      REPEND
     71  f14e		       85 02		      sta	WSYNC
     70  f14e					      REPEND
     71  f150		       85 02		      sta	WSYNC
     70  f150					      REPEND
     71  f152		       85 02		      sta	WSYNC
     70  f152					      REPEND
     71  f154		       85 02		      sta	WSYNC
     70  f154					      REPEND
     71  f156		       85 02		      sta	WSYNC
     70  f156					      REPEND
     71  f158		       85 02		      sta	WSYNC
     70  f158					      REPEND
     71  f15a		       85 02		      sta	WSYNC
     70  f15a					      REPEND
     71  f15c		       85 02		      sta	WSYNC
     70  f15c					      REPEND
     71  f15e		       85 02		      sta	WSYNC
     70  f15e					      REPEND
     71  f160		       85 02		      sta	WSYNC
     70  f160					      REPEND
     71  f162		       85 02		      sta	WSYNC
     70  f162					      REPEND
     71  f164		       85 02		      sta	WSYNC
     70  f164					      REPEND
     71  f166		       85 02		      sta	WSYNC
     70  f166					      REPEND
     71  f168		       85 02		      sta	WSYNC
     70  f168					      REPEND
     71  f16a		       85 02		      sta	WSYNC
     70  f16a					      REPEND
     71  f16c		       85 02		      sta	WSYNC
     70  f16c					      REPEND
     71  f16e		       85 02		      sta	WSYNC
     70  f16e					      REPEND
     71  f170		       85 02		      sta	WSYNC
     70  f170					      REPEND
     71  f172		       85 02		      sta	WSYNC
     70  f172					      REPEND
     71  f174		       85 02		      sta	WSYNC
     70  f174					      REPEND
     71  f176		       85 02		      sta	WSYNC
     70  f176					      REPEND
     71  f178		       85 02		      sta	WSYNC
     70  f178					      REPEND
     71  f17a		       85 02		      sta	WSYNC
     70  f17a					      REPEND
     71  f17c		       85 02		      sta	WSYNC
     70  f17c					      REPEND
     71  f17e		       85 02		      sta	WSYNC
     70  f17e					      REPEND
     71  f180		       85 02		      sta	WSYNC
     70  f180					      REPEND
     71  f182		       85 02		      sta	WSYNC
     70  f182					      REPEND
     71  f184		       85 02		      sta	WSYNC
     70  f184					      REPEND
     71  f186		       85 02		      sta	WSYNC
     70  f186					      REPEND
     71  f188		       85 02		      sta	WSYNC
     70  f188					      REPEND
     71  f18a		       85 02		      sta	WSYNC
     70  f18a					      REPEND
     71  f18c		       85 02		      sta	WSYNC
     70  f18c					      REPEND
     71  f18e		       85 02		      sta	WSYNC
     70  f18e					      REPEND
     71  f190		       85 02		      sta	WSYNC
     70  f190					      REPEND
     71  f192		       85 02		      sta	WSYNC
     70  f192					      REPEND
     71  f194		       85 02		      sta	WSYNC
     70  f194					      REPEND
     71  f196		       85 02		      sta	WSYNC
     70  f196					      REPEND
     71  f198		       85 02		      sta	WSYNC
     70  f198					      REPEND
     71  f19a		       85 02		      sta	WSYNC
     70  f19a					      REPEND
     71  f19c		       85 02		      sta	WSYNC
     70  f19c					      REPEND
     71  f19e		       85 02		      sta	WSYNC
     70  f19e					      REPEND
     71  f1a0		       85 02		      sta	WSYNC
     70  f1a0					      REPEND
     71  f1a2		       85 02		      sta	WSYNC
     70  f1a2					      REPEND
     71  f1a4		       85 02		      sta	WSYNC
     70  f1a4					      REPEND
     71  f1a6		       85 02		      sta	WSYNC
     70  f1a6					      REPEND
     71  f1a8		       85 02		      sta	WSYNC
     70  f1a8					      REPEND
     71  f1aa		       85 02		      sta	WSYNC
     70  f1aa					      REPEND
     71  f1ac		       85 02		      sta	WSYNC
     70  f1ac					      REPEND
     71  f1ae		       85 02		      sta	WSYNC
     70  f1ae					      REPEND
     71  f1b0		       85 02		      sta	WSYNC
     70  f1b0					      REPEND
     71  f1b2		       85 02		      sta	WSYNC
     70  f1b2					      REPEND
     71  f1b4		       85 02		      sta	WSYNC
     70  f1b4					      REPEND
     71  f1b6		       85 02		      sta	WSYNC
     70  f1b6					      REPEND
     71  f1b8		       85 02		      sta	WSYNC
     70  f1b8					      REPEND
     71  f1ba		       85 02		      sta	WSYNC
     70  f1ba					      REPEND
     71  f1bc		       85 02		      sta	WSYNC
     70  f1bc					      REPEND
     71  f1be		       85 02		      sta	WSYNC
     70  f1be					      REPEND
     71  f1c0		       85 02		      sta	WSYNC
     70  f1c0					      REPEND
     71  f1c2		       85 02		      sta	WSYNC
     70  f1c2					      REPEND
     71  f1c4		       85 02		      sta	WSYNC
     70  f1c4					      REPEND
     71  f1c6		       85 02		      sta	WSYNC
     70  f1c6					      REPEND
     71  f1c8		       85 02		      sta	WSYNC
     70  f1c8					      REPEND
     71  f1ca		       85 02		      sta	WSYNC
     70  f1ca					      REPEND
     71  f1cc		       85 02		      sta	WSYNC
     70  f1cc					      REPEND
     71  f1ce		       85 02		      sta	WSYNC
     70  f1ce					      REPEND
     71  f1d0		       85 02		      sta	WSYNC
     70  f1d0					      REPEND
     71  f1d2		       85 02		      sta	WSYNC
     70  f1d2					      REPEND
     71  f1d4		       85 02		      sta	WSYNC
     70  f1d4					      REPEND
     71  f1d6		       85 02		      sta	WSYNC
     70  f1d6					      REPEND
     71  f1d8		       85 02		      sta	WSYNC
     70  f1d8					      REPEND
     71  f1da		       85 02		      sta	WSYNC
     70  f1da					      REPEND
     71  f1dc		       85 02		      sta	WSYNC
     70  f1dc					      REPEND
     71  f1de		       85 02		      sta	WSYNC
     70  f1de					      REPEND
     71  f1e0		       85 02		      sta	WSYNC
     70  f1e0					      REPEND
     71  f1e2		       85 02		      sta	WSYNC
     70  f1e2					      REPEND
     71  f1e4		       85 02		      sta	WSYNC
     70  f1e4					      REPEND
     71  f1e6		       85 02		      sta	WSYNC
     70  f1e6					      REPEND
     71  f1e8		       85 02		      sta	WSYNC
     70  f1e8					      REPEND
     71  f1ea		       85 02		      sta	WSYNC
     70  f1ea					      REPEND
     71  f1ec		       85 02		      sta	WSYNC
     70  f1ec					      REPEND
     71  f1ee		       85 02		      sta	WSYNC
     70  f1ee					      REPEND
     71  f1f0		       85 02		      sta	WSYNC
     70  f1f0					      REPEND
     71  f1f2		       85 02		      sta	WSYNC
     70  f1f2					      REPEND
     71  f1f4		       85 02		      sta	WSYNC
     72  f1f6					      REPEND
     73  f1f6
     74  f1f6							;; set PF(0-2), display 7 scanlines
     75  f1f6		       a2 e0		      ldx	#%11100000
     76  f1f8		       86 0d		      stx	PF0
     77  f1fa		       a2 ff		      ldx	#%11111111
     78  f1fc		       86 0e		      stx	PF1
     79  f1fe		       86 0f		      stx	PF2
     80  f200					      REPEAT	7
     81  f200		       85 02		      sta	WSYNC
     80  f200					      REPEND
     81  f202		       85 02		      sta	WSYNC
     80  f202					      REPEND
     81  f204		       85 02		      sta	WSYNC
     80  f204					      REPEND
     81  f206		       85 02		      sta	WSYNC
     80  f206					      REPEND
     81  f208		       85 02		      sta	WSYNC
     80  f208					      REPEND
     81  f20a		       85 02		      sta	WSYNC
     80  f20a					      REPEND
     81  f20c		       85 02		      sta	WSYNC
     82  f20e					      REPEND
     83  f20e
     84  f20e							;; 7 no PF set scanlines
     85  f20e		       a2 00		      ldx	#0
     86  f210		       86 0d		      stx	PF0
     87  f212		       86 0e		      stx	PF1
     88  f214		       86 0f		      stx	PF2
     89  f216					      REPEAT	7
     90  f216		       85 02		      sta	WSYNC
     89  f216					      REPEND
     90  f218		       85 02		      sta	WSYNC
     89  f218					      REPEND
     90  f21a		       85 02		      sta	WSYNC
     89  f21a					      REPEND
     90  f21c		       85 02		      sta	WSYNC
     89  f21c					      REPEND
     90  f21e		       85 02		      sta	WSYNC
     89  f21e					      REPEND
     90  f220		       85 02		      sta	WSYNC
     89  f220					      REPEND
     90  f222		       85 02		      sta	WSYNC
     91  f224					      REPEND
     92  f224
     93  f224							;; 30 VBLANK oversan scanlines
     94  f224		       a9 02		      lda	#2
     95  f226		       85 01		      sta	VBLANK
     96  f228					      REPEAT	30
     97  f228		       85 02		      sta	WSYNC
     96  f228					      REPEND
     97  f22a		       85 02		      sta	WSYNC
     96  f22a					      REPEND
     97  f22c		       85 02		      sta	WSYNC
     96  f22c					      REPEND
     97  f22e		       85 02		      sta	WSYNC
     96  f22e					      REPEND
     97  f230		       85 02		      sta	WSYNC
     96  f230					      REPEND
     97  f232		       85 02		      sta	WSYNC
     96  f232					      REPEND
     97  f234		       85 02		      sta	WSYNC
     96  f234					      REPEND
     97  f236		       85 02		      sta	WSYNC
     96  f236					      REPEND
     97  f238		       85 02		      sta	WSYNC
     96  f238					      REPEND
     97  f23a		       85 02		      sta	WSYNC
     96  f23a					      REPEND
     97  f23c		       85 02		      sta	WSYNC
     96  f23c					      REPEND
     97  f23e		       85 02		      sta	WSYNC
     96  f23e					      REPEND
     97  f240		       85 02		      sta	WSYNC
     96  f240					      REPEND
     97  f242		       85 02		      sta	WSYNC
     96  f242					      REPEND
     97  f244		       85 02		      sta	WSYNC
     96  f244					      REPEND
     97  f246		       85 02		      sta	WSYNC
     96  f246					      REPEND
     97  f248		       85 02		      sta	WSYNC
     96  f248					      REPEND
     97  f24a		       85 02		      sta	WSYNC
     96  f24a					      REPEND
     97  f24c		       85 02		      sta	WSYNC
     96  f24c					      REPEND
     97  f24e		       85 02		      sta	WSYNC
     96  f24e					      REPEND
     97  f250		       85 02		      sta	WSYNC
     96  f250					      REPEND
     97  f252		       85 02		      sta	WSYNC
     96  f252					      REPEND
     97  f254		       85 02		      sta	WSYNC
     96  f254					      REPEND
     97  f256		       85 02		      sta	WSYNC
     96  f256					      REPEND
     97  f258		       85 02		      sta	WSYNC
     96  f258					      REPEND
     97  f25a		       85 02		      sta	WSYNC
     96  f25a					      REPEND
     97  f25c		       85 02		      sta	WSYNC
     96  f25c					      REPEND
     97  f25e		       85 02		      sta	WSYNC
     96  f25e					      REPEND
     97  f260		       85 02		      sta	WSYNC
     96  f260					      REPEND
     97  f262		       85 02		      sta	WSYNC
     98  f264					      REPEND
     99  f264		       a9 00		      LDA	#0
    100  f266		       85 01		      sta	VBLANK
    101  f268
    102  f268		       4c 12 f0 	      jmp	StartFrame
    103  f26b
    104  fffc					      org	$FFFC
    105  fffc		       00 f0		      .word.w	Reset
    106  fffe		       00 f0		      .word.w	Reset

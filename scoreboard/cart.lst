------- FILE scoreboard.asm LEVEL 1 PASS 2
      1  fffe					      processor	6502
      2  10000 ????
      3  10000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      4  10000 ????						;; include macros and register alias
      5  10000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.06, 06/SEP/2020
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_VCS =	106
      5  10000 ????
      6  10000 ????						; THIS IS *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at https://dasm-assembler.github.io/
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     16  10000 ????						; contents, or would like ot add something, please report as an issue at...
     17  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     18  10000 ????
     19  10000 ????						;
     20  10000 ????						; Latest Revisions...
     21  10000 ????						; 1.06  05/SEP/2020	 Modified header/license and links to new versions
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE scoreboard.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"macro.h"
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.09, 05/SEP/2020
      3  0000 ????
      4  0000 ????	       00 6d	   VERSION_MACRO =	109
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler.
     13  0000 ????						;
     14  0000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     15  0000 ????						; contents, or would like ot add something, please report as an issue at...
     16  0000 ????						; https://github.com/dasm-assembler/dasm/issues
     17  0000 ????
     18  0000 ????
     19  0000 ????						; Latest Revisions...
     20  0000 ????						; 1.09  05/SEP/2020	 - updated license/links
     21  0000 ????
     22  0000 ????						; 1.08  13/JUL/2020	 - added use of LXA to CLEAN_START
     23  0000 ????						; 1.07  19/JAN/2020	 - correction to comment VERTICAL_SYNC
     24  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_SYNC (Edwin Blink)
     25  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     26  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     27  0000 ????						;			   used for code assembly.
     28  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     29  0000 ????						;
     30  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     31  0000 ????						;
     32  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     33  0000 ????						;			   (standardised macro for vertical synch code)
     34  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     35  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     36  0000 ????						; 1.0	22/MAR/2003		Initial release
     37  0000 ????
     38  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     39  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     40  0000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     41  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     42  0000 ????						;   registers and require them to be defined first).
     43  0000 ????
     44  0000 ????						; Available macros...
     45  0000 ????						;   SLEEP n		 - sleep for n cycles
     46  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     47  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     48  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     49  0000 ????
     50  0000 ????						;-------------------------------------------------------------------------------
     51  0000 ????						; SLEEP duration
     52  0000 ????						; Original author: Thomas Jentzsch
     53  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     54  0000 ????						; useful for code where precise timing is required.
     55  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     56  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     57  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     58  0000 ????
     59  0000 ????				      MAC	sleep
     60  0000 ????			   .CYCLES    SET	{1}
     61  0000 ????
     62  0000 ????				      IF	.CYCLES < 2
     63  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     64  0000 ????				      ERR
     65  0000 ????				      ENDIF
     66  0000 ????
     67  0000 ????				      IF	.CYCLES & 1
     68  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     69  0000 ????				      nop	0
     70  0000 ????				      ELSE
     71  0000 ????				      bit	VSYNC
     72  0000 ????				      ENDIF
     73  0000 ????			   .CYCLES    SET	.CYCLES - 3
     74  0000 ????				      ENDIF
     75  0000 ????
     76  0000 ????				      REPEAT	.CYCLES / 2
     77  0000 ????				      nop
     78  0000 ????				      REPEND
     79  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     80  0000 ????
     81  0000 ????						;-------------------------------------------------------------------------------
     82  0000 ????						; VERTICAL_SYNC
     83  0000 ????						; revised version by Edwin Blink -- saves bytes!
     84  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     85  0000 ????						; Note: Alters the accumulator
     86  0000 ????
     87  0000 ????						; OUT: A = 0
     88  0000 ????
     89  0000 ????				      MAC	vertical_sync
     90  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     91  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     92  0000 ????				      sta	VSYNC
     93  0000 ????				      lsr
     94  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     95  0000 ????				      ENDM
     96  0000 ????
     97  0000 ????						;-------------------------------------------------------------------------------
     98  0000 ????						; CLEAN_START
     99  0000 ????						; Original author: Andrew Davie
    100  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    101  0000 ????						; Sets stack pointer to $FF, and all registers to 0
    102  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    103  0000 ????						; Use as very first section of code on boot (ie: at reset)
    104  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    105  0000 ????
    106  0000 ????				      MAC	clean_start
    107  0000 ????				      sei
    108  0000 ????				      cld
    109  0000 ????
    110  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
    111  0000 ????				      lxa	#0
    112  0000 ????				      ELSE
    113  0000 ????				      ldx	#0
    114  0000 ????				      txa
    115  0000 ????				      ENDIF
    116  0000 ????				      tay
    117  0000 ????			   .CLEAR_STACK dex
    118  0000 ????				      txs
    119  0000 ????				      pha
    120  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  0000 ????
    122  0000 ????				      ENDM
    123  0000 ????
    124  0000 ????						;-------------------------------------------------------
    125  0000 ????						; SET_POINTER
    126  0000 ????						; Original author: Manuel Rotschkar
    127  0000 ????						;
    128  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  0000 ????						;
    130  0000 ????						; Usage: SET_POINTER pointer, address
    131  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  0000 ????						;
    133  0000 ????						; Note: Alters the accumulator, NZ flags
    134  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  0000 ????						; IN 2: absolute address
    136  0000 ????
    137  0000 ????				      MAC	set_pointer
    138  0000 ????			   .POINTER   SET	{1}
    139  0000 ????			   .ADDRESS   SET	{2}
    140  0000 ????
    141  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  0000 ????				      STA	.POINTER	; Store in pointer
    143  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    144  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    145  0000 ????
    146  0000 ????				      ENDM
    147  0000 ????
    148  0000 ????						;-------------------------------------------------------
    149  0000 ????						; BOUNDARY byte#
    150  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    151  0000 ????						;
    152  0000 ????						; Push data to a certain position inside a page and keep count of how
    153  0000 ????						; many free bytes the programmer will have.
    154  0000 ????						;
    155  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    156  0000 ????
    157  0000 ????			   .FREE_BYTES SET	0
    158  0000 ????				      MAC	boundary
    159  0000 ????				      REPEAT	256
    160  0000 ????				      IF	<. % {1} = 0
    161  0000 ????				      MEXIT
    162  0000 ????				      ELSE
    163  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    164  0000 ????				      .byte	$00
    165  0000 ????				      ENDIF
    166  0000 ????				      REPEND
    167  0000 ????				      ENDM
    168  0000 ????
    169  0000 ????
    170  0000 ????						; EOF
------- FILE scoreboard.asm
      8  0000 ????
      9  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     10  0000 ????						;; var declaration segment
     11  0000 ????						;; $80 up to $FF
     12  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     13 U0082 ????				      seg.u	var
     14 U0080					      org	$80
     15 U0080		       00	   P0Height   byte.b		; one byte for P0Height
     16 U0081		       00	   PlayerYPos byte.b
     17 U0082
     18 U0082							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     19 U0082							;; start ROM code at $F000
     20 U0082							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     21  10000 ????				       seg	code
     22  f000					      org	$F000
     23  f000				   Reset
      0  f000					      CLEAN_START
      1  f000		       78		      sei
      2  f001		       d8		      cld
      3  f002
      4  f002					      IFNCONST	NO_ILLEGAL_OPCODES
      5  f002		       ab 00		      lxa	#0
      6  f004				  -	      ELSE
      7  f004				  -	      ldx	#0
      8  f004				  -	      txa
      9  f004					      ENDIF
     10  f004		       a8		      tay
     11  f005		       ca	   .CLEAR_STACK dex
     12  f006		       9a		      txs
     13  f007		       48		      pha
     14  f008		       d0 fb		      bne	.CLEAR_STACK
     15  f00a
     25  f00a
     26  f00a		       a2 80		      ldx	#$80
     27  f00c		       86 09		      stx	COLUBK
     28  f00e
     29  f00e		       a9 0f		      lda	#%1111
     30  f010		       85 08		      sta	COLUPF
     31  f012
     32  f012							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     33  f012							;; initialize vars
     34  f012							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     35  f012
     36  f012		       a9 b4		      lda	#180
     37  f014		       85 81		      sta	PlayerYPos
     38  f016
     39  f016		       a9 09		      lda	#9
     40  f018		       85 80		      sta	P0Height
     41  f01a
     42  f01a							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     43  f01a							;; sets VBLANK and VSYNC
     44  f01a							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     45  f01a				   StartFrame
     46  f01a		       a9 02		      lda	#2
     47  f01c		       85 01		      sta	VBLANK
     48  f01e		       85 00		      sta	VSYNC
     49  f020
     50  f020							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     51  f020							;; display 3 VSYNC lines
     52  f020							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     53  f020					      REPEAT	3
     54  f020		       85 02		      sta	WSYNC
     53  f020					      REPEND
     54  f022		       85 02		      sta	WSYNC
     53  f022					      REPEND
     54  f024		       85 02		      sta	WSYNC
     55  f026					      REPEND
     56  f026		       a9 00		      lda	#0
     57  f028		       85 00		      sta	VSYNC
     58  f02a
     59  f02a							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     60  f02a							;; display 37 VBLANK lines
     61  f02a							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     62  f02a					      REPEAT	37
     63  f02a		       85 02		      sta	WSYNC
     62  f02a					      REPEND
     63  f02c		       85 02		      sta	WSYNC
     62  f02c					      REPEND
     63  f02e		       85 02		      sta	WSYNC
     62  f02e					      REPEND
     63  f030		       85 02		      sta	WSYNC
     62  f030					      REPEND
     63  f032		       85 02		      sta	WSYNC
     62  f032					      REPEND
     63  f034		       85 02		      sta	WSYNC
     62  f034					      REPEND
     63  f036		       85 02		      sta	WSYNC
     62  f036					      REPEND
     63  f038		       85 02		      sta	WSYNC
     62  f038					      REPEND
     63  f03a		       85 02		      sta	WSYNC
     62  f03a					      REPEND
     63  f03c		       85 02		      sta	WSYNC
     62  f03c					      REPEND
     63  f03e		       85 02		      sta	WSYNC
     62  f03e					      REPEND
     63  f040		       85 02		      sta	WSYNC
     62  f040					      REPEND
     63  f042		       85 02		      sta	WSYNC
     62  f042					      REPEND
     63  f044		       85 02		      sta	WSYNC
     62  f044					      REPEND
     63  f046		       85 02		      sta	WSYNC
     62  f046					      REPEND
     63  f048		       85 02		      sta	WSYNC
     62  f048					      REPEND
     63  f04a		       85 02		      sta	WSYNC
     62  f04a					      REPEND
     63  f04c		       85 02		      sta	WSYNC
     62  f04c					      REPEND
     63  f04e		       85 02		      sta	WSYNC
     62  f04e					      REPEND
     63  f050		       85 02		      sta	WSYNC
     62  f050					      REPEND
     63  f052		       85 02		      sta	WSYNC
     62  f052					      REPEND
     63  f054		       85 02		      sta	WSYNC
     62  f054					      REPEND
     63  f056		       85 02		      sta	WSYNC
     62  f056					      REPEND
     63  f058		       85 02		      sta	WSYNC
     62  f058					      REPEND
     63  f05a		       85 02		      sta	WSYNC
     62  f05a					      REPEND
     63  f05c		       85 02		      sta	WSYNC
     62  f05c					      REPEND
     63  f05e		       85 02		      sta	WSYNC
     62  f05e					      REPEND
     63  f060		       85 02		      sta	WSYNC
     62  f060					      REPEND
     63  f062		       85 02		      sta	WSYNC
     62  f062					      REPEND
     63  f064		       85 02		      sta	WSYNC
     62  f064					      REPEND
     63  f066		       85 02		      sta	WSYNC
     62  f066					      REPEND
     63  f068		       85 02		      sta	WSYNC
     62  f068					      REPEND
     63  f06a		       85 02		      sta	WSYNC
     62  f06a					      REPEND
     63  f06c		       85 02		      sta	WSYNC
     62  f06c					      REPEND
     63  f06e		       85 02		      sta	WSYNC
     62  f06e					      REPEND
     63  f070		       85 02		      sta	WSYNC
     62  f070					      REPEND
     63  f072		       85 02		      sta	WSYNC
     64  f074					      REPEND
     65  f074
     66  f074		       a9 00		      lda	#0
     67  f076		       85 01		      sta	VBLANK
     68  f078
     69  f078							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     70  f078							;; display 192 visible scanlines
     71  f078							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     72  f078					      REPEAT	10
     73  f078		       85 02		      sta	WSYNC
     72  f078					      REPEND
     73  f07a		       85 02		      sta	WSYNC
     72  f07a					      REPEND
     73  f07c		       85 02		      sta	WSYNC
     72  f07c					      REPEND
     73  f07e		       85 02		      sta	WSYNC
     72  f07e					      REPEND
     73  f080		       85 02		      sta	WSYNC
     72  f080					      REPEND
     73  f082		       85 02		      sta	WSYNC
     72  f082					      REPEND
     73  f084		       85 02		      sta	WSYNC
     72  f084					      REPEND
     73  f086		       85 02		      sta	WSYNC
     72  f086					      REPEND
     73  f088		       85 02		      sta	WSYNC
     72  f088					      REPEND
     73  f08a		       85 02		      sta	WSYNC
     74  f08c					      REPEND
     75  f08c
     76  f08c		       a0 00		      ldy	#0
     77  f08e				   LoopScoreboard
     78  f08e		       b9 f2 ff 	      lda	NumberBitmap,Y
     79  f091		       85 0e		      sta	PF1
     80  f093		       85 02		      sta	WSYNC
     81  f095		       c8		      iny
     82  f096		       c0 0a		      cpy	#10	; compares y register with #10 (z-flag set)
     83  f098		       d0 f4		      bne	LoopScoreboard
     84  f09a
     85  f09a		       a9 00		      lda	#0
     86  f09c		       85 0e		      sta	PF1
     87  f09e					      REPEAT	50
     88  f09e		       85 02		      sta	WSYNC
     87  f09e					      REPEND
     88  f0a0		       85 02		      sta	WSYNC
     87  f0a0					      REPEND
     88  f0a2		       85 02		      sta	WSYNC
     87  f0a2					      REPEND
     88  f0a4		       85 02		      sta	WSYNC
     87  f0a4					      REPEND
     88  f0a6		       85 02		      sta	WSYNC
     87  f0a6					      REPEND
     88  f0a8		       85 02		      sta	WSYNC
     87  f0a8					      REPEND
     88  f0aa		       85 02		      sta	WSYNC
     87  f0aa					      REPEND
     88  f0ac		       85 02		      sta	WSYNC
     87  f0ac					      REPEND
     88  f0ae		       85 02		      sta	WSYNC
     87  f0ae					      REPEND
     88  f0b0		       85 02		      sta	WSYNC
     87  f0b0					      REPEND
     88  f0b2		       85 02		      sta	WSYNC
     87  f0b2					      REPEND
     88  f0b4		       85 02		      sta	WSYNC
     87  f0b4					      REPEND
     88  f0b6		       85 02		      sta	WSYNC
     87  f0b6					      REPEND
     88  f0b8		       85 02		      sta	WSYNC
     87  f0b8					      REPEND
     88  f0ba		       85 02		      sta	WSYNC
     87  f0ba					      REPEND
     88  f0bc		       85 02		      sta	WSYNC
     87  f0bc					      REPEND
     88  f0be		       85 02		      sta	WSYNC
     87  f0be					      REPEND
     88  f0c0		       85 02		      sta	WSYNC
     87  f0c0					      REPEND
     88  f0c2		       85 02		      sta	WSYNC
     87  f0c2					      REPEND
     88  f0c4		       85 02		      sta	WSYNC
     87  f0c4					      REPEND
     88  f0c6		       85 02		      sta	WSYNC
     87  f0c6					      REPEND
     88  f0c8		       85 02		      sta	WSYNC
     87  f0c8					      REPEND
     88  f0ca		       85 02		      sta	WSYNC
     87  f0ca					      REPEND
     88  f0cc		       85 02		      sta	WSYNC
     87  f0cc					      REPEND
     88  f0ce		       85 02		      sta	WSYNC
     87  f0ce					      REPEND
     88  f0d0		       85 02		      sta	WSYNC
     87  f0d0					      REPEND
     88  f0d2		       85 02		      sta	WSYNC
     87  f0d2					      REPEND
     88  f0d4		       85 02		      sta	WSYNC
     87  f0d4					      REPEND
     88  f0d6		       85 02		      sta	WSYNC
     87  f0d6					      REPEND
     88  f0d8		       85 02		      sta	WSYNC
     87  f0d8					      REPEND
     88  f0da		       85 02		      sta	WSYNC
     87  f0da					      REPEND
     88  f0dc		       85 02		      sta	WSYNC
     87  f0dc					      REPEND
     88  f0de		       85 02		      sta	WSYNC
     87  f0de					      REPEND
     88  f0e0		       85 02		      sta	WSYNC
     87  f0e0					      REPEND
     88  f0e2		       85 02		      sta	WSYNC
     87  f0e2					      REPEND
     88  f0e4		       85 02		      sta	WSYNC
     87  f0e4					      REPEND
     88  f0e6		       85 02		      sta	WSYNC
     87  f0e6					      REPEND
     88  f0e8		       85 02		      sta	WSYNC
     87  f0e8					      REPEND
     88  f0ea		       85 02		      sta	WSYNC
     87  f0ea					      REPEND
     88  f0ec		       85 02		      sta	WSYNC
     87  f0ec					      REPEND
     88  f0ee		       85 02		      sta	WSYNC
     87  f0ee					      REPEND
     88  f0f0		       85 02		      sta	WSYNC
     87  f0f0					      REPEND
     88  f0f2		       85 02		      sta	WSYNC
     87  f0f2					      REPEND
     88  f0f4		       85 02		      sta	WSYNC
     87  f0f4					      REPEND
     88  f0f6		       85 02		      sta	WSYNC
     87  f0f6					      REPEND
     88  f0f8		       85 02		      sta	WSYNC
     87  f0f8					      REPEND
     88  f0fa		       85 02		      sta	WSYNC
     87  f0fa					      REPEND
     88  f0fc		       85 02		      sta	WSYNC
     87  f0fc					      REPEND
     88  f0fe		       85 02		      sta	WSYNC
     87  f0fe					      REPEND
     88  f100		       85 02		      sta	WSYNC
     89  f102					      REPEND
     90  f102
     91  f102		       a0 00		      ldy	#0
     92  f104				   LoopP0
     93  f104		       b9 e8 ff 	      lda	PlayerBitmap,Y
     94  f107		       85 1b		      sta	GRP0
     95  f109		       85 02		      sta	WSYNC
     96  f10b		       c8		      iny
     97  f10c		       c4 80		      cpy	P0Height
     98  f10e		       d0 f4		      bne	LoopP0
     99  f110
    100  f110		       a9 00		      lda	#0
    101  f112		       85 1b		      sta	GRP0
    102  f114
    103  f114							;; 10 P1 scanlines
    104  f114		       a0 00		      ldy	#0
    105  f116				   LoopP1
    106  f116							;;
    107  f116		       b9 e8 ff 	      lda	PlayerBitmap,Y
    108  f119		       85 1c		      sta	GRP1
    109  f11b		       85 02		      sta	WSYNC
    110  f11d		       c8		      iny
    111  f11e		       c4 80		      cpy	P0Height
    112  f120		       d0 f4		      bne	LoopP1
    113  f122
    114  f122		       a9 00		      lda	#0
    115  f124		       85 1c		      sta	GRP1
    116  f126
    117  f126							;; render remaining scanlines (102)
    118  f126
    119  f126					      REPEAT	102
    120  f126		       85 02		      sta	WSYNC
    119  f126					      REPEND
    120  f128		       85 02		      sta	WSYNC
    119  f128					      REPEND
    120  f12a		       85 02		      sta	WSYNC
    119  f12a					      REPEND
    120  f12c		       85 02		      sta	WSYNC
    119  f12c					      REPEND
    120  f12e		       85 02		      sta	WSYNC
    119  f12e					      REPEND
    120  f130		       85 02		      sta	WSYNC
    119  f130					      REPEND
    120  f132		       85 02		      sta	WSYNC
    119  f132					      REPEND
    120  f134		       85 02		      sta	WSYNC
    119  f134					      REPEND
    120  f136		       85 02		      sta	WSYNC
    119  f136					      REPEND
    120  f138		       85 02		      sta	WSYNC
    119  f138					      REPEND
    120  f13a		       85 02		      sta	WSYNC
    119  f13a					      REPEND
    120  f13c		       85 02		      sta	WSYNC
    119  f13c					      REPEND
    120  f13e		       85 02		      sta	WSYNC
    119  f13e					      REPEND
    120  f140		       85 02		      sta	WSYNC
    119  f140					      REPEND
    120  f142		       85 02		      sta	WSYNC
    119  f142					      REPEND
    120  f144		       85 02		      sta	WSYNC
    119  f144					      REPEND
    120  f146		       85 02		      sta	WSYNC
    119  f146					      REPEND
    120  f148		       85 02		      sta	WSYNC
    119  f148					      REPEND
    120  f14a		       85 02		      sta	WSYNC
    119  f14a					      REPEND
    120  f14c		       85 02		      sta	WSYNC
    119  f14c					      REPEND
    120  f14e		       85 02		      sta	WSYNC
    119  f14e					      REPEND
    120  f150		       85 02		      sta	WSYNC
    119  f150					      REPEND
    120  f152		       85 02		      sta	WSYNC
    119  f152					      REPEND
    120  f154		       85 02		      sta	WSYNC
    119  f154					      REPEND
    120  f156		       85 02		      sta	WSYNC
    119  f156					      REPEND
    120  f158		       85 02		      sta	WSYNC
    119  f158					      REPEND
    120  f15a		       85 02		      sta	WSYNC
    119  f15a					      REPEND
    120  f15c		       85 02		      sta	WSYNC
    119  f15c					      REPEND
    120  f15e		       85 02		      sta	WSYNC
    119  f15e					      REPEND
    120  f160		       85 02		      sta	WSYNC
    119  f160					      REPEND
    120  f162		       85 02		      sta	WSYNC
    119  f162					      REPEND
    120  f164		       85 02		      sta	WSYNC
    119  f164					      REPEND
    120  f166		       85 02		      sta	WSYNC
    119  f166					      REPEND
    120  f168		       85 02		      sta	WSYNC
    119  f168					      REPEND
    120  f16a		       85 02		      sta	WSYNC
    119  f16a					      REPEND
    120  f16c		       85 02		      sta	WSYNC
    119  f16c					      REPEND
    120  f16e		       85 02		      sta	WSYNC
    119  f16e					      REPEND
    120  f170		       85 02		      sta	WSYNC
    119  f170					      REPEND
    120  f172		       85 02		      sta	WSYNC
    119  f172					      REPEND
    120  f174		       85 02		      sta	WSYNC
    119  f174					      REPEND
    120  f176		       85 02		      sta	WSYNC
    119  f176					      REPEND
    120  f178		       85 02		      sta	WSYNC
    119  f178					      REPEND
    120  f17a		       85 02		      sta	WSYNC
    119  f17a					      REPEND
    120  f17c		       85 02		      sta	WSYNC
    119  f17c					      REPEND
    120  f17e		       85 02		      sta	WSYNC
    119  f17e					      REPEND
    120  f180		       85 02		      sta	WSYNC
    119  f180					      REPEND
    120  f182		       85 02		      sta	WSYNC
    119  f182					      REPEND
    120  f184		       85 02		      sta	WSYNC
    119  f184					      REPEND
    120  f186		       85 02		      sta	WSYNC
    119  f186					      REPEND
    120  f188		       85 02		      sta	WSYNC
    119  f188					      REPEND
    120  f18a		       85 02		      sta	WSYNC
    119  f18a					      REPEND
    120  f18c		       85 02		      sta	WSYNC
    119  f18c					      REPEND
    120  f18e		       85 02		      sta	WSYNC
    119  f18e					      REPEND
    120  f190		       85 02		      sta	WSYNC
    119  f190					      REPEND
    120  f192		       85 02		      sta	WSYNC
    119  f192					      REPEND
    120  f194		       85 02		      sta	WSYNC
    119  f194					      REPEND
    120  f196		       85 02		      sta	WSYNC
    119  f196					      REPEND
    120  f198		       85 02		      sta	WSYNC
    119  f198					      REPEND
    120  f19a		       85 02		      sta	WSYNC
    119  f19a					      REPEND
    120  f19c		       85 02		      sta	WSYNC
    119  f19c					      REPEND
    120  f19e		       85 02		      sta	WSYNC
    119  f19e					      REPEND
    120  f1a0		       85 02		      sta	WSYNC
    119  f1a0					      REPEND
    120  f1a2		       85 02		      sta	WSYNC
    119  f1a2					      REPEND
    120  f1a4		       85 02		      sta	WSYNC
    119  f1a4					      REPEND
    120  f1a6		       85 02		      sta	WSYNC
    119  f1a6					      REPEND
    120  f1a8		       85 02		      sta	WSYNC
    119  f1a8					      REPEND
    120  f1aa		       85 02		      sta	WSYNC
    119  f1aa					      REPEND
    120  f1ac		       85 02		      sta	WSYNC
    119  f1ac					      REPEND
    120  f1ae		       85 02		      sta	WSYNC
    119  f1ae					      REPEND
    120  f1b0		       85 02		      sta	WSYNC
    119  f1b0					      REPEND
    120  f1b2		       85 02		      sta	WSYNC
    119  f1b2					      REPEND
    120  f1b4		       85 02		      sta	WSYNC
    119  f1b4					      REPEND
    120  f1b6		       85 02		      sta	WSYNC
    119  f1b6					      REPEND
    120  f1b8		       85 02		      sta	WSYNC
    119  f1b8					      REPEND
    120  f1ba		       85 02		      sta	WSYNC
    119  f1ba					      REPEND
    120  f1bc		       85 02		      sta	WSYNC
    119  f1bc					      REPEND
    120  f1be		       85 02		      sta	WSYNC
    119  f1be					      REPEND
    120  f1c0		       85 02		      sta	WSYNC
    119  f1c0					      REPEND
    120  f1c2		       85 02		      sta	WSYNC
    119  f1c2					      REPEND
    120  f1c4		       85 02		      sta	WSYNC
    119  f1c4					      REPEND
    120  f1c6		       85 02		      sta	WSYNC
    119  f1c6					      REPEND
    120  f1c8		       85 02		      sta	WSYNC
    119  f1c8					      REPEND
    120  f1ca		       85 02		      sta	WSYNC
    119  f1ca					      REPEND
    120  f1cc		       85 02		      sta	WSYNC
    119  f1cc					      REPEND
    120  f1ce		       85 02		      sta	WSYNC
    119  f1ce					      REPEND
    120  f1d0		       85 02		      sta	WSYNC
    119  f1d0					      REPEND
    120  f1d2		       85 02		      sta	WSYNC
    119  f1d2					      REPEND
    120  f1d4		       85 02		      sta	WSYNC
    119  f1d4					      REPEND
    120  f1d6		       85 02		      sta	WSYNC
    119  f1d6					      REPEND
    120  f1d8		       85 02		      sta	WSYNC
    119  f1d8					      REPEND
    120  f1da		       85 02		      sta	WSYNC
    119  f1da					      REPEND
    120  f1dc		       85 02		      sta	WSYNC
    119  f1dc					      REPEND
    120  f1de		       85 02		      sta	WSYNC
    119  f1de					      REPEND
    120  f1e0		       85 02		      sta	WSYNC
    119  f1e0					      REPEND
    120  f1e2		       85 02		      sta	WSYNC
    119  f1e2					      REPEND
    120  f1e4		       85 02		      sta	WSYNC
    119  f1e4					      REPEND
    120  f1e6		       85 02		      sta	WSYNC
    119  f1e6					      REPEND
    120  f1e8		       85 02		      sta	WSYNC
    119  f1e8					      REPEND
    120  f1ea		       85 02		      sta	WSYNC
    119  f1ea					      REPEND
    120  f1ec		       85 02		      sta	WSYNC
    119  f1ec					      REPEND
    120  f1ee		       85 02		      sta	WSYNC
    119  f1ee					      REPEND
    120  f1f0		       85 02		      sta	WSYNC
    121  f1f2					      REPEND
    122  f1f2
    123  f1f2							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    124  f1f2							;; output 30 VBLANK overscan lines
    125  f1f2							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    126  f1f2		       a9 02		      lda	#2
    127  f1f4		       85 01		      sta	VBLANK
    128  f1f6					      REPEAT	30
    129  f1f6		       85 02		      sta	WSYNC
    128  f1f6					      REPEND
    129  f1f8		       85 02		      sta	WSYNC
    128  f1f8					      REPEND
    129  f1fa		       85 02		      sta	WSYNC
    128  f1fa					      REPEND
    129  f1fc		       85 02		      sta	WSYNC
    128  f1fc					      REPEND
    129  f1fe		       85 02		      sta	WSYNC
    128  f1fe					      REPEND
    129  f200		       85 02		      sta	WSYNC
    128  f200					      REPEND
    129  f202		       85 02		      sta	WSYNC
    128  f202					      REPEND
    129  f204		       85 02		      sta	WSYNC
    128  f204					      REPEND
    129  f206		       85 02		      sta	WSYNC
    128  f206					      REPEND
    129  f208		       85 02		      sta	WSYNC
    128  f208					      REPEND
    129  f20a		       85 02		      sta	WSYNC
    128  f20a					      REPEND
    129  f20c		       85 02		      sta	WSYNC
    128  f20c					      REPEND
    129  f20e		       85 02		      sta	WSYNC
    128  f20e					      REPEND
    129  f210		       85 02		      sta	WSYNC
    128  f210					      REPEND
    129  f212		       85 02		      sta	WSYNC
    128  f212					      REPEND
    129  f214		       85 02		      sta	WSYNC
    128  f214					      REPEND
    129  f216		       85 02		      sta	WSYNC
    128  f216					      REPEND
    129  f218		       85 02		      sta	WSYNC
    128  f218					      REPEND
    129  f21a		       85 02		      sta	WSYNC
    128  f21a					      REPEND
    129  f21c		       85 02		      sta	WSYNC
    128  f21c					      REPEND
    129  f21e		       85 02		      sta	WSYNC
    128  f21e					      REPEND
    129  f220		       85 02		      sta	WSYNC
    128  f220					      REPEND
    129  f222		       85 02		      sta	WSYNC
    128  f222					      REPEND
    129  f224		       85 02		      sta	WSYNC
    128  f224					      REPEND
    129  f226		       85 02		      sta	WSYNC
    128  f226					      REPEND
    129  f228		       85 02		      sta	WSYNC
    128  f228					      REPEND
    129  f22a		       85 02		      sta	WSYNC
    128  f22a					      REPEND
    129  f22c		       85 02		      sta	WSYNC
    128  f22c					      REPEND
    129  f22e		       85 02		      sta	WSYNC
    128  f22e					      REPEND
    129  f230		       85 02		      sta	WSYNC
    130  f232					      REPEND
    131  f232		       a9 00		      LDA	#0
    132  f234		       85 01		      sta	VBLANK
    133  f236
    134  f236		       4c 1a f0 	      jmp	StartFrame
    135  f239
    136  f239							;; player numberarray
    137  ffe8					      org	$FFE8
    138  ffe8				   PlayerBitmap
    139  ffe8		       10		      .byte.b	#%00010000	;---0----
    140  ffe9		       18		      .byte.b	#%00011000	;---00---
    141  ffea		       3c		      .byte.b	#%00111100	;0-0000-0
    142  ffeb		       7e		      .byte.b	#%01111110	;-000000-
    143  ffec		       18		      .byte.b	#%00011000	;---00---
    144  ffed		       3c		      .byte.b	#%00111100	;--0000--
    145  ffee		       3c		      .byte.b	#%00111100	;--0000--
    146  ffef		       3c		      .byte.b	#%00111100	;--0000--
    147  fff0		       3e		      .byte.b	#%00111110	;--00000-
    148  fff1		       7e		      .byte.b	#%01111110	;-000000-
    149  fff2
    150  fff2							;; scoreboard number array
    151  fff2					      org	$FFF2
    152  fff2				   NumberBitmap
    153  fff2		       0e		      .byte.b	#%00001110
    154  fff3		       0e		      .byte.b	#%00001110
    155  fff4		       02		      .byte.b	#%00000010
    156  fff5		       0e		      .byte.b	#%00001110
    157  fff6		       0e		      .byte.b	#%00001110
    158  fff7		       08		      .byte.b	#%00001000
    159  fff8		       08		      .byte.b	#%00001000
    160  fff9		       08		      .byte.b	#%00001000
    161  fffa		       0e		      .byte.b	#%00001110
    162  fffb		       0e		      .byte.b	#%00001110
    163  fffc
    164  fffc					      org	$FFFC
    165  fffc		       00 f0		      .word.w	Reset
    166  fffe		       00 f0		      .word.w	Reset
